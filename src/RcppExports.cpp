// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// crfsuite_copyright
Rcpp::List crfsuite_copyright();
RcppExport SEXP _crfsuite_crfsuite_copyright() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(crfsuite_copyright());
    return rcpp_result_gen;
END_RCPP
}
// crfsuite_model_parameters
Rcpp::List crfsuite_model_parameters(const std::string method, const std::string type);
RcppExport SEXP _crfsuite_crfsuite_model_parameters(SEXP methodSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(crfsuite_model_parameters(method, type));
    return rcpp_result_gen;
END_RCPP
}
// crfsuite_model_build
Rcpp::List crfsuite_model_build(const char* file_model, const std::vector<int> doc_id, const std::vector<std::string> y, Rcpp::CharacterMatrix x, Rcpp::NumericMatrix embeddings, Rcpp::List options, const std::string method, const std::string type, int trace);
RcppExport SEXP _crfsuite_crfsuite_model_build(SEXP file_modelSEXP, SEXP doc_idSEXP, SEXP ySEXP, SEXP xSEXP, SEXP embeddingsSEXP, SEXP optionsSEXP, SEXP methodSEXP, SEXP typeSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type file_model(file_modelSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type doc_id(doc_idSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type embeddings(embeddingsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(crfsuite_model_build(file_model, doc_id, y, x, embeddings, options, method, type, trace));
    return rcpp_result_gen;
END_RCPP
}
// crfsuite_model
Rcpp::List crfsuite_model(const char* file_model);
RcppExport SEXP _crfsuite_crfsuite_model(SEXP file_modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type file_model(file_modelSEXP);
    rcpp_result_gen = Rcpp::wrap(crfsuite_model(file_model));
    return rcpp_result_gen;
END_RCPP
}
// crfsuite_model_dump
void crfsuite_model_dump(const char* file_model, const char* file_txt);
RcppExport SEXP _crfsuite_crfsuite_model_dump(SEXP file_modelSEXP, SEXP file_txtSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type file_model(file_modelSEXP);
    Rcpp::traits::input_parameter< const char* >::type file_txt(file_txtSEXP);
    crfsuite_model_dump(file_model, file_txt);
    return R_NilValue;
END_RCPP
}
// crfsuite_model_coefficients
Rcpp::List crfsuite_model_coefficients(const char* file_model);
RcppExport SEXP _crfsuite_crfsuite_model_coefficients(SEXP file_modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type file_model(file_modelSEXP);
    rcpp_result_gen = Rcpp::wrap(crfsuite_model_coefficients(file_model));
    return rcpp_result_gen;
END_RCPP
}
// crfsuite_predict
Rcpp::List crfsuite_predict(const std::string file_model, const std::vector<int> doc_id, Rcpp::CharacterMatrix x, Rcpp::NumericMatrix embeddings, int trace);
RcppExport SEXP _crfsuite_crfsuite_predict(SEXP file_modelSEXP, SEXP doc_idSEXP, SEXP xSEXP, SEXP embeddingsSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file_model(file_modelSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type doc_id(doc_idSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type embeddings(embeddingsSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(crfsuite_predict(file_model, doc_id, x, embeddings, trace));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_crfsuite_crfsuite_copyright", (DL_FUNC) &_crfsuite_crfsuite_copyright, 0},
    {"_crfsuite_crfsuite_model_parameters", (DL_FUNC) &_crfsuite_crfsuite_model_parameters, 2},
    {"_crfsuite_crfsuite_model_build", (DL_FUNC) &_crfsuite_crfsuite_model_build, 9},
    {"_crfsuite_crfsuite_model", (DL_FUNC) &_crfsuite_crfsuite_model, 1},
    {"_crfsuite_crfsuite_model_dump", (DL_FUNC) &_crfsuite_crfsuite_model_dump, 2},
    {"_crfsuite_crfsuite_model_coefficients", (DL_FUNC) &_crfsuite_crfsuite_model_coefficients, 1},
    {"_crfsuite_crfsuite_predict", (DL_FUNC) &_crfsuite_crfsuite_predict, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_crfsuite(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
